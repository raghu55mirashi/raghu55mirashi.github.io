{"version":3,"file":"static/js/303.d90b020c.chunk.js","mappings":"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","sources":["components/layouts/right/ContactMe.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faEnvelopeOpen, faMapMarkerAlt, faMobileAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport MyContext from '../../../store/MyContext'\r\nimport Swal from 'sweetalert2'\r\n\r\nexport default class ContactMe extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            tooltipOpen: true,\r\n            errorMessage: '',\r\n            username: '',\r\n            email: '',\r\n            message: '',\r\n            subject: '',\r\n            errors: {\r\n                usernameErr: '',\r\n                emailErr: '',\r\n                messageErr: '',\r\n                subjectErr: ''\r\n            }\r\n        }\r\n        this.refmsg = React.createRef()\r\n        this.refuser = React.createRef()\r\n        this.refemail = React.createRef()\r\n        this.refsub = React.createRef()\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const { name, value } = e.target\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n        // let err = ''\r\n        // if (name === 'message' || name === 'username' || name === 'subject') {\r\n        //     if (value.length < 3) {\r\n        //         err = `Enter your ${name} with atleast 3 character`\r\n        //     }\r\n        // }\r\n\r\n        // this.setState({\r\n        //     errorMessage: err\r\n        // })\r\n    }\r\n    // renderError() {\r\n    //     if (this.state.formValidation && this.state.message.length <= 3) {\r\n    //         return (\r\n    //             <label className=\"error\">Please enter the atleast 3 character.</label>\r\n    //         );\r\n    //     }\r\n    //     return null;\r\n    // }\r\n    validation = (re, checkData, data, err) => {\r\n        if (!re.test(checkData) && checkData.length < 3) {\r\n            this.setState((prevData) => {\r\n                return { ...prevData, errors: { ...prevData.errors, [err]: `${data} is invalid` } }\r\n            }, () => { console.log(this.state); })\r\n            return false;\r\n        } else {\r\n            this.setState((prevData) => {\r\n                return { ...prevData, errors: { ...prevData.errors, [err]: `` } }\r\n            }, () => { console.log(this.state); })\r\n            return true;\r\n        }\r\n        // let valid = true\r\n        // const { username, email, message, subject } = this.state\r\n        // if (message.length <= 3) {\r\n        //     valid = false\r\n        // }\r\n        // return valid\r\n        // if (username.length < 3) {\r\n        //     this.refuser.current.focus();\r\n        // }\r\n        // if (!email) {\r\n        //     this.refemail.current.focus();\r\n        // }\r\n        // if (subject.length < 3) {\r\n        //     this.refsub.current.focus();\r\n        // }\r\n    }\r\n    validate = () => {\r\n        let valid = true\r\n        const { username, email, message, subject } = this.state\r\n        if (username.length < 3) {\r\n            valid = false\r\n        }\r\n        return valid\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        /* eslint-disable */\r\n        const usernameRE = /^[A-Z]{2,10}$/i;\r\n        const messageRE = /^[A-Z]{2,100}$/i;\r\n        const subjectRE = /^[A-Z]{2,20}$/i;\r\n        const emailRE = /^([a-zA-Z0-9_\\.\\-]+)@([a-zA-Z0-9_\\.\\-]+)\\.([a-zA-Z]{2,5})$/;\r\n        // const passRE = /^[A-Za-z0-9_\\.\\-\\@\\#\\!\\%\\^\\$]{4}$/;\r\n        // const mobileRE = /^[0-9]{10}$/;\r\n\r\n        const { username, email, message, subject } = this.state\r\n\r\n        // if (message.length <= 3) {\r\n        //     this.refmsg.current.focus();\r\n        //     this.setState({\r\n        //         tooltipOpen: true\r\n        //     })\r\n        // }\r\n        // if (username.length < 3) {\r\n        //     this.refuser.current.focus();\r\n        // }\r\n        // if (!email) {\r\n        //     this.refemail.current.focus();\r\n        // }\r\n        // if (subject.length < 3) {\r\n        //     this.refsub.current.focus();\r\n        // }\r\n        if (\r\n            this.validation(usernameRE, username, \"username\", \"usernameErr\") &&\r\n            this.validation(messageRE, message, \"message\", \"messageErr\") &&\r\n            this.validation(subjectRE, subject, \"subject\", \"subjectErr\") &&\r\n            this.validation(emailRE, email, \"email\", \"emailErr\")\r\n        ) {\r\n            // if (username.length >= 3 && email && message.length >= 3 && subject.length >= 3) {\r\n            const urls = e.target.elements.urls.value\r\n            fetch(`${urls}/contactus.json`, {\r\n                method: 'POST',\r\n                mode: 'cors',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    \"username\": username,\r\n                    \"email\": email,\r\n                    \"message\": message,\r\n                    \"subject\": subject\r\n                })\r\n            }).then(res => {\r\n                if (res.status === 200) {\r\n                    this.setState({\r\n                        username: '',\r\n                        email: '',\r\n                        message: '',\r\n                        subject: ''\r\n                    })\r\n                    Swal.fire(\r\n                        'Message Sent! Will Contact you soon',\r\n                        ' ',\r\n                        'success'\r\n                    )\r\n                }\r\n            })\r\n        } else {\r\n            Swal.fire('Please fill fields with atleast 3 characters')\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        setInterval(() => this.setState({ success: false }), 5000)\r\n    }\r\n\r\n    render() {\r\n        // var alertMsg = null;\r\n        // if (this.state.success) {\r\n        //     alertMsg = (\r\n        //         <div className=\"alert alert-success my-3\">\r\n        //             <strong> Message sent! Thank you, will contact you soon! </strong>\r\n        //         </div>)\r\n        // }\r\n        const { username, email, message, subject, errors } = this.state\r\n\r\n        return (\r\n            <MyContext.Consumer>\r\n                {context => (\r\n                    <React.Fragment>\r\n                        <div className=\"contact\" style={{ overflow: 'auto' }}>\r\n                            <div className=\"card\" style={{ boxShadow: \"0 5px 11px #ccc\" }} >\r\n                                <div className=\"card-header\"><FontAwesomeIcon icon={faEnvelopeOpen} />{' '}CONTACT ME</div>\r\n                                <div className=\"card-body\" style={{ background: '#e9ecef' }}>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col-lg-8\">\r\n                                            <div className=\"contact-form\">\r\n                                                <form onSubmit={this.handleSubmit} id=\"post\">\r\n                                                    <textarea name=\"message\" id=\"message\" cols=\"50\" rows=\"5\" maxLength=\"300\" placeholder=\"Message\"\r\n                                                        className=\"form-control\" style={{ marginBottom: '10px' }} title=\"Maximum of 300 characters can use\"\r\n                                                        onChange={this.handleChange} value={message} onBlur={this.validate()} />\r\n                                                    <span className=\"text-danger\">{errors.messageErr}</span>\r\n                                                    <input type=\"text\" title={this.state.errorMessage} name=\"username\" placeholder=\"Username\"\r\n                                                        className=\"form-control\" style={{ marginRight: \"4%\" }}\r\n                                                        onChange={this.handleChange} value={username} />\r\n                                                    <span className=\"text-danger\">{errors.usernameErr}</span>\r\n                                                    <input type=\"email\" name=\"email\" placeholder=\"Email\"\r\n                                                        className=\"form-control\" required id=\"contact-email\"\r\n                                                        onChange={this.handleChange} value={email} />\r\n                                                    <span className=\"text-danger\">{errors.emailErr}</span>\r\n                                                    <div className=\"form-group\">\r\n                                                        <input type=\"text\" title={this.state.errorMessage} name=\"subject\" placeholder=\"Subject\"\r\n                                                            className=\"form-control\"\r\n                                                            onChange={this.handleChange} value={subject} />\r\n                                                        <span className=\"text-danger\">{errors.subjectErr}</span>\r\n                                                    </div>\r\n                                                    <input type=\"hidden\" name=\"urls\" value={context.url} />\r\n                                                    <div className=\"form-sub port-btn\">\r\n                                                        <button type=\"submit\" className=\"btn btn1\" style={{ color: \"white\", backgroundColor: \"black\" }}>SEND MESSAGE</button>\r\n                                                    </div>\r\n                                                    <span></span>\r\n                                                </form>\r\n\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"col-lg-4\">\r\n                                            <div className=\"address\">\r\n                                                <hr />\r\n                                                {(context.Personal) ? Object.keys(context.Personal).map((item, id) =>\r\n                                                    (<span key={id}><p><FontAwesomeIcon icon={faMapMarkerAlt} />{' '}{context.Personal[item].address}</p>\r\n                                                        <p><FontAwesomeIcon icon={faEnvelopeOpen} />{' '}{context.Personal[item].email}</p>\r\n                                                        <p><FontAwesomeIcon icon={faMobileAlt} />{' '}{context.Personal[item].phone}</p></span>)\r\n                                                ) : <div>Record Not Available</div>}\r\n                                                <hr />\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </React.Fragment>\r\n                )}\r\n            </MyContext.Consumer>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n// import React, { Component } from 'react'\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n// import { faEnvelopeOpen, faMapMarkerAlt, faMobileAlt } from '@fortawesome/free-solid-svg-icons'\r\n// import MyContext from '../../../store/MyContext'\r\n// import Swal from 'sweetalert2'\r\n\r\n// export default class ContactMe extends Component {\r\n//     constructor(props) {\r\n//         super(props)\r\n//         this.state = {\r\n//             tooltipOpen: true,\r\n//             errorMessage: '',\r\n//             username: '',\r\n//             email: '',\r\n//             message: '',\r\n//             subject: ''\r\n//         }\r\n//         this.refmsg = React.createRef()\r\n//         this.refuser = React.createRef()\r\n//         this.refemail = React.createRef()\r\n//         this.refsub = React.createRef()\r\n//     }\r\n//     handleChange = (e) => {\r\n//         const { name, value } = e.target\r\n//         this.setState({\r\n//             [name]: value\r\n//         })\r\n//         let err = ''\r\n//         if (name === 'message' || name === 'username' || name === 'subject') {\r\n//             if (value.length < 3) {\r\n//                 err = `Enter your ${name} with atleast 3 character`\r\n//             }\r\n//         }\r\n//         this.setState({\r\n//             errorMessage: err\r\n//         })\r\n//     }\r\n//     handleSubmit = (e) => {\r\n//         e.preventDefault()\r\n//         const { username, email, message, subject } = this.state\r\n//         if (message.length <= 3) {\r\n//             this.refmsg.current.focus();\r\n//             this.setState({\r\n//                 tooltipOpen: true\r\n//             })\r\n//         }\r\n//         if (username.length < 3) {\r\n//             this.refuser.current.focus();\r\n//         }\r\n//         if (!email) {\r\n//             this.refemail.current.focus();\r\n//         }\r\n//         if (subject.length < 3) {\r\n//             this.refsub.current.focus();\r\n//         }\r\n//         const urls = e.target.elements.urls.value\r\n\r\n//         if (username.length >= 3 && email && message.length >= 3 && subject.length >= 3) {\r\n//             fetch(`${urls}/contactus.json`, {\r\n//                 method: 'POST',\r\n//                 mode: 'cors',\r\n//                 headers: {\r\n//                     'Content-Type': 'application/json'\r\n//                 },\r\n//                 body: JSON.stringify({\r\n//                     \"username\": username,\r\n//                     \"email\": email,\r\n//                     \"message\": message,\r\n//                     \"subject\": subject\r\n//                 })\r\n//             }).then(res => {\r\n//                 if (res.status === 200) {\r\n//                     this.setState({\r\n//                         username: '',\r\n//                         email: '',\r\n//                         message: '',\r\n//                         subject: ''\r\n//                     })\r\n//                     Swal.fire(\r\n//                         'Message Sent! Will Contact you soon',\r\n//                         ' ',\r\n//                         'success'\r\n//                     )\r\n//                 }\r\n//             })\r\n//         } else {\r\n//             Swal.fire('Please fill fields with atleast 3 characters')\r\n//         }\r\n//     }\r\n\r\n//     componentDidMount() {\r\n//         setInterval(() => this.setState({ success: false }), 5000)\r\n//     }\r\n\r\n//     render() {\r\n//         // var alertMsg = null;\r\n//         // if (this.state.success) {\r\n//         //     alertMsg = (\r\n//         //         <div className=\"alert alert-success my-3\">\r\n//         //             <strong> Message sent! Thank you, will contact you soon! </strong>\r\n//         //         </div>)\r\n//         // }\r\n//         const { username, email, message, subject } = this.state\r\n\r\n//         return (\r\n//             <MyContext.Consumer>\r\n//                 {context => (\r\n//                     <React.Fragment>\r\n//                         <div className=\"contact\" style={{ overflow: 'auto' }}>\r\n//                             <div className=\"card\" style={{ boxShadow: \"0 5px 11px #ccc\" }} >\r\n//                                 <div className=\"card-header\"><FontAwesomeIcon icon={faEnvelopeOpen} />{' '}CONTACT ME</div>\r\n//                                 <div className=\"card-body\" style={{ background: '#e9ecef' }}>\r\n//                                     <div className=\"row\">\r\n//                                         <div className=\"col-lg-8\">\r\n//                                             <div className=\"contact-form\">\r\n//                                                 <form onSubmit={this.handleSubmit} id=\"post\">\r\n//                                                     <textarea name=\"message\" id=\"message\" cols=\"50\" rows=\"5\" maxLength=\"300\" placeholder=\"Message\"\r\n//                                                         className=\"form-control\" style={{ marginBottom: '10px' }} title=\"Maximum of 300 characters can use\"\r\n//                                                         onChange={this.handleChange} ref={this.refmsg} value={message} />\r\n\r\n//                                                     <input type=\"text\" title={this.state.errorMessage} name=\"username\" placeholder=\"Username\"\r\n//                                                         className=\"form-control\" style={{ marginRight: \"4%\" }}\r\n//                                                         onChange={this.handleChange} ref={this.refuser} value={username} />\r\n//                                                     <input type=\"email\" name=\"email\" placeholder=\"Email\"\r\n//                                                         className=\"form-control\" required id=\"contact-email\"\r\n//                                                         onChange={this.handleChange} ref={this.refemail} value={email} />\r\n//                                                     <div className=\"form-group\">\r\n//                                                         <input type=\"text\" title={this.state.errorMessage} name=\"subject\" placeholder=\"Subject\"\r\n//                                                             className=\"form-control\" required\r\n//                                                             onChange={this.handleChange} ref={this.refsub} value={subject} />\r\n//                                                     </div>\r\n//                                                     <input type=\"hidden\" name=\"urls\" value={context.url} />\r\n//                                                     <div className=\"form-sub port-btn\">\r\n//                                                         <button type=\"submit\" className=\"btn btn1\" style={{ color: \"white\", backgroundColor: \"black\" }}>SEND MESSAGE</button>\r\n//                                                     </div>\r\n//                                                     <span></span>\r\n//                                                 </form>\r\n\r\n//                                             </div>\r\n//                                         </div>\r\n//                                         <div className=\"col-lg-4\">\r\n//                                             <div className=\"address\">\r\n//                                                 <hr />\r\n//                                                 {(context.Personal) ? Object.keys(context.Personal).map((item, id) =>\r\n//                                                     (<span key={id}><p><FontAwesomeIcon icon={faMapMarkerAlt} />{' '}{context.Personal[item].address}</p>\r\n//                                                         <p><FontAwesomeIcon icon={faEnvelopeOpen} />{' '}{context.Personal[item].email}</p>\r\n//                                                         <p><FontAwesomeIcon icon={faMobileAlt} />{' '}{context.Personal[item].phone}</p></span>)\r\n//                                                 ) : <div>Record Not Available</div>}\r\n//                                                 <hr />\r\n//                                             </div>\r\n//                                         </div>\r\n//                                     </div>\r\n//                                 </div>\r\n//                             </div>\r\n//                         </div>\r\n//                     </React.Fragment>\r\n//                 )}\r\n//             </MyContext.Consumer>\r\n//         )\r\n//     }\r\n// }"],"names":["ContactMe","props","handleChange","e","target","name","value","setState","validation","re","checkData","data","err","test","length","prevData","errors","console","log","state","validate","valid","username","email","message","subject","handleSubmit","preventDefault","urls","elements","fetch","method","mode","headers","body","JSON","stringify","then","res","status","Swal","tooltipOpen","errorMessage","usernameErr","emailErr","messageErr","subjectErr","refmsg","React","refuser","refemail","refsub","setInterval","success","this","context","className","style","overflow","boxShadow","icon","faEnvelopeOpen","background","onSubmit","id","cols","rows","maxLength","placeholder","marginBottom","title","onChange","onBlur","type","marginRight","required","url","color","backgroundColor","Personal","Object","keys","map","item","faMapMarkerAlt","address","faMobileAlt","phone","Component"],"sourceRoot":""}